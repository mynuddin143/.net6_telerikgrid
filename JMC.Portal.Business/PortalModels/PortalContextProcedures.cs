// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using JMC.Portal.Business.PortalModels;

namespace JMC.Portal.Business.PortalModels
{
    public partial class PortalContext
    {
        private IPortalContextProcedures _procedures;

        public virtual IPortalContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new PortalContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IPortalContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<FixFKConstraintsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetBacklogResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetBacklogDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetBacklogDetail1Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetBacklogDetailoldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDeliveryNumbersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetSAPMaterialPricingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetSAPStockResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetSAPStock_1Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<PortalUsageResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PortalUsageDetailResult>().HasNoKey().ToView(null);
        }
    }

    public partial class PortalContextProcedures : IPortalContextProcedures
    {
        private readonly PortalContext _context;

        public PortalContextProcedures(PortalContext context)
        {
            _context = context;
        }

        public virtual async Task<List<FixFKConstraintsResult>> FixFKConstraintsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<FixFKConstraintsResult>("EXEC @returnValue = [dbo].[FixFKConstraints]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBacklogResult>> GetBacklogAsync(long? sapSoldToID, long? sapShipToID, long? sapSalesOrganizationID, long? sapSalesOfficeID, long? sapCustomerGroupID, long? sapSalesGroupID, long? userID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sapSoldToID",
                    Value = sapSoldToID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapShipToID",
                    Value = sapShipToID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesOrganizationID",
                    Value = sapSalesOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesOfficeID",
                    Value = sapSalesOfficeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapCustomerGroupID",
                    Value = sapCustomerGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesGroupID",
                    Value = sapSalesGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBacklogResult>("EXEC @returnValue = [dbo].[GetBacklog] @sapSoldToID, @sapShipToID, @sapSalesOrganizationID, @sapSalesOfficeID, @sapCustomerGroupID, @sapSalesGroupID, @userID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBacklogDetailResult>> GetBacklogDetailAsync(long? sapSoldToID, long? sapShipToID, long? plantID, long? sapSalesOrganizationID, long? sapSalesOfficeID, long? sapCustomerGroupID, long? sapSalesGroupID, long? userID, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sapSoldToID",
                    Value = sapSoldToID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapShipToID",
                    Value = sapShipToID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "plantID",
                    Value = plantID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesOrganizationID",
                    Value = sapSalesOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesOfficeID",
                    Value = sapSalesOfficeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapCustomerGroupID",
                    Value = sapCustomerGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesGroupID",
                    Value = sapSalesGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBacklogDetailResult>("EXEC @returnValue = [dbo].[GetBacklogDetail] @sapSoldToID, @sapShipToID, @plantID, @sapSalesOrganizationID, @sapSalesOfficeID, @sapCustomerGroupID, @sapSalesGroupID, @userID, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBacklogDetail1Result>> GetBacklogDetail1Async(long? sapSoldToID, long? sapShipToID, long? plantID, long? sapSalesOrganizationID, long? sapSalesOfficeID, long? sapCustomerGroupID, long? sapSalesGroupID, long? userID, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sapSoldToID",
                    Value = sapSoldToID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapShipToID",
                    Value = sapShipToID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "plantID",
                    Value = plantID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesOrganizationID",
                    Value = sapSalesOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesOfficeID",
                    Value = sapSalesOfficeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapCustomerGroupID",
                    Value = sapCustomerGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesGroupID",
                    Value = sapSalesGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBacklogDetail1Result>("EXEC @returnValue = [dbo].[GetBacklogDetail-1] @sapSoldToID, @sapShipToID, @plantID, @sapSalesOrganizationID, @sapSalesOfficeID, @sapCustomerGroupID, @sapSalesGroupID, @userID, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBacklogDetailoldResult>> GetBacklogDetailoldAsync(long? sapSoldToID, long? sapShipToID, long? plantID, long? sapSalesOrganizationID, long? sapSalesOfficeID, long? sapCustomerGroupID, long? sapSalesGroupID, long? userID, string status, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sapSoldToID",
                    Value = sapSoldToID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapShipToID",
                    Value = sapShipToID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "plantID",
                    Value = plantID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesOrganizationID",
                    Value = sapSalesOrganizationID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesOfficeID",
                    Value = sapSalesOfficeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapCustomerGroupID",
                    Value = sapCustomerGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapSalesGroupID",
                    Value = sapSalesGroupID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 10,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBacklogDetailoldResult>("EXEC @returnValue = [dbo].[GetBacklogDetail-old] @sapSoldToID, @sapShipToID, @plantID, @sapSalesOrganizationID, @sapSalesOfficeID, @sapCustomerGroupID, @sapSalesGroupID, @userID, @status", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDeliveryNumbersResult>> GetDeliveryNumbersAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDeliveryNumbersResult>("EXEC @returnValue = [dbo].[GetDeliveryNumbers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSAPMaterialPricingResult>> GetSAPMaterialPricingAsync(long? soldToId, long? sapTubeShapeId, DateTime? today, decimal? guageId, long? materialId, decimal? size, decimal? size2, decimal? diameter, long? plantid, string materialCode, string grade, bool? includeOTS, bool? secondary, int? excessPrimeDays, string NPSShape, long? shipToId, string materialIds, OutputParameter<string> ErrorMessage, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterErrorMessage = new SqlParameter
            {
                ParameterName = "ErrorMessage",
                Size = 500,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ErrorMessage?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "soldToId",
                    Value = soldToId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapTubeShapeId",
                    Value = sapTubeShapeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "today",
                    Value = today ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "guageId",
                    Precision = 18,
                    Scale = 4,
                    Value = guageId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "materialId",
                    Value = materialId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "size",
                    Precision = 18,
                    Scale = 4,
                    Value = size ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "size2",
                    Precision = 18,
                    Scale = 4,
                    Value = size2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "diameter",
                    Precision = 18,
                    Scale = 4,
                    Value = diameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "plantid",
                    Value = plantid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "materialCode",
                    Size = 100,
                    Value = materialCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "grade",
                    Size = 100,
                    Value = grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "includeOTS",
                    Value = includeOTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "secondary",
                    Value = secondary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "excessPrimeDays",
                    Value = excessPrimeDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NPSShape",
                    Size = 100,
                    Value = NPSShape ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "shipToId",
                    Value = shipToId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "materialIds",
                    Size = -1,
                    Value = materialIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterErrorMessage,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSAPMaterialPricingResult>("EXEC @returnValue = [dbo].[GetSAPMaterialPricing] @soldToId, @sapTubeShapeId, @today, @guageId, @materialId, @size, @size2, @diameter, @plantid, @materialCode, @grade, @includeOTS, @secondary, @excessPrimeDays, @NPSShape, @shipToId, @materialIds, @ErrorMessage OUTPUT", sqlParameters, cancellationToken);

            ErrorMessage.SetValue(parameterErrorMessage.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSAPStockResult>> GetSAPStockAsync(long? userID, long? sapTubeShapeID, decimal? size1, decimal? size2, decimal? diameter, long? plantID, string gaugeCharacteristicCode, decimal? gauge, string grade, bool? includeOTS, bool? secondary, bool? includeExcess, int? excessPrimeDays, DateTime? today, string NPSShape, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapTubeShapeID",
                    Value = sapTubeShapeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "size1",
                    Precision = 18,
                    Scale = 5,
                    Value = size1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "size2",
                    Precision = 18,
                    Scale = 5,
                    Value = size2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "diameter",
                    Precision = 18,
                    Scale = 5,
                    Value = diameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "plantID",
                    Value = plantID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "gaugeCharacteristicCode",
                    Size = 50,
                    Value = gaugeCharacteristicCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "gauge",
                    Precision = 18,
                    Scale = 5,
                    Value = gauge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "grade",
                    Size = 8,
                    Value = grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "includeOTS",
                    Value = includeOTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "secondary",
                    Value = secondary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includeExcess",
                    Value = includeExcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "excessPrimeDays",
                    Value = excessPrimeDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "today",
                    Value = today ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "NPSShape",
                    Size = 10,
                    Value = NPSShape ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSAPStockResult>("EXEC @returnValue = [dbo].[GetSAPStock] @userID, @sapTubeShapeID, @size1, @size2, @diameter, @plantID, @gaugeCharacteristicCode, @gauge, @grade, @includeOTS, @secondary, @includeExcess, @excessPrimeDays, @today, @NPSShape", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSAPStock_1Result>> GetSAPStock_1Async(long? userID, long? sapTubeShapeID, decimal? size1, decimal? size2, decimal? diameter, long? plantID, string gaugeCharacteristicCode, decimal? gauge, string grade, bool? includeOTS, bool? secondary, bool? includeExcess, int? excessPrimeDays, DateTime? today, string NPSShape, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "sapTubeShapeID",
                    Value = sapTubeShapeID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "size1",
                    Precision = 18,
                    Scale = 5,
                    Value = size1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "size2",
                    Precision = 18,
                    Scale = 5,
                    Value = size2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "diameter",
                    Precision = 18,
                    Scale = 5,
                    Value = diameter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "plantID",
                    Value = plantID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "gaugeCharacteristicCode",
                    Size = 50,
                    Value = gaugeCharacteristicCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "gauge",
                    Precision = 18,
                    Scale = 5,
                    Value = gauge ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "grade",
                    Size = 8,
                    Value = grade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "includeOTS",
                    Value = includeOTS ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "secondary",
                    Value = secondary ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "includeExcess",
                    Value = includeExcess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "excessPrimeDays",
                    Value = excessPrimeDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "today",
                    Value = today ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "NPSShape",
                    Size = 10,
                    Value = NPSShape ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSAPStock_1Result>("EXEC @returnValue = [dbo].[GetSAPStock_1] @userID, @sapTubeShapeID, @size1, @size2, @diameter, @plantID, @gaugeCharacteristicCode, @gauge, @grade, @includeOTS, @secondary, @includeExcess, @excessPrimeDays, @today, @NPSShape", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PortalUsageResult>> PortalUsageAsync(string flgpotal, long? userID, long? SAPSoldtoID, DateTime? FromDate, DateTime? ToDate, string RecordSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "flgpotal",
                    Size = 3,
                    Value = flgpotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SAPSoldtoID",
                    Value = SAPSoldtoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "RecordSource",
                    Size = 10,
                    Value = RecordSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PortalUsageResult>("EXEC @returnValue = [dbo].[PortalUsage] @flgpotal, @userID, @SAPSoldtoID, @FromDate, @ToDate, @RecordSource", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PortalUsageDetailResult>> PortalUsageDetailAsync(string flgpotal, long? userID, long? SAPSoldtoID, DateTime? FromDate, DateTime? ToDate, string RecordSource, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "flgpotal",
                    Size = 3,
                    Value = flgpotal ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userID",
                    Value = userID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "SAPSoldtoID",
                    Value = SAPSoldtoID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.BigInt,
                },
                new SqlParameter
                {
                    ParameterName = "FromDate",
                    Value = FromDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ToDate",
                    Value = ToDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "RecordSource",
                    Size = 10,
                    Value = RecordSource ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Char,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PortalUsageDetailResult>("EXEC @returnValue = [dbo].[PortalUsageDetail] @flgpotal, @userID, @SAPSoldtoID, @FromDate, @ToDate, @RecordSource", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> TEMPSPAsync(string DataView, string FieldName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DataView",
                    Size = 50,
                    Value = DataView ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FieldName",
                    Size = 50,
                    Value = FieldName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[TEMPSP] @DataView, @FieldName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
